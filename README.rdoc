= carpool

Carpool is a single-sign-on (sso) solution for rack based applications. It is designed to allow you to designate one application as a "driver" which powers authentication, and sends session information to "passengers".

= Installation

Install the gem
	gem install carpool
	
= Configuration

Configure the application you wish to designate as your driver. In Rails based applications, add Carpool::Driver to your middleware stack. The configuration takes three options.

- One or more passengers. This takes two options, first, the domain name of the passenger application (the referrer), second a 'secret' designated to the passenger application. This secret can be anything, but must match in both the driver and passenger sites.
- unauthorized_uri. If there isn't an existing session within the driver application, redirect to this location to handle logins etc
- revoke_uri. This url is used to "logout" passengers from the driver

	Rails.configuration.middleware.use Carpool::Driver do |config|
	  carpool_configuration['passengers'].each do |c|
	    config.passenger 'apasengerdomain.com', :secret => 'secret_key'
	  end
	  config.unauthorized_uri = 'urlforunauthoried.passengers'
	  config.revoke_uri       = 'signout'
	end

Then configure the application that you would like to function as your passenger, adding Carpool::Passenger to your middleware stack. This takes two options.

- driver_uri. This is the url/location of the 'driver' site. (ie: http://yourdriver.com)
- secret. This is a shared secret between both the driver and the passenger to verify the passenger has permission to authenticate itself here.

	Rails.configuration.middleware.use Carpool::Passenger do |config|
	  config.driver_uri = 'http://yourdriver.com'
	  config.secret = "secret_key"
	end
	
= Authenticating

Authentication in your driver application can be handled however you would like. When sessions are created, simply check to see if authentication was requested by a passenger website, or the actual application itself. To check this, use Carpool.auth_attempt?  When authentication is initiated by a passenger, Carpool creates a 'seatbelt' object which represents the session details to be passed back after successful login/session.

	# Create user session (authlogic format used as an example)
	
	user_session.save
	
	if Carpool.auth_attempt?
	
	  # This login request was generated from a passenger
	  # current_user represents our now logged in user
	  # env is the rack environment
	
	  seatbelt = Carpool::SeatBelt.new(env).fasten!(current_user)
	  redirect_to seatbelt
	
	else
	  # Handle local logins here
	end

Seatbelt.fasten! generates a url representing a url back to the Passenger application, including a session payload that Carpool::Passenger uses to generate a session within itself.	

	

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Brent Kirby. See LICENSE for details.
